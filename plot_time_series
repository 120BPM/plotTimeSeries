#!/usr/bin/Rscript

#
#   Copyright John Quinn, 2013
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# plot_time_series - A simple utility for plotting a time_series graph
#
#     Version:    1.0:     Created:  John D Quinn, http://www.johnandcailin.com/john
#

require('getopt');

removeOutliers <- function(x, na.rm = TRUE, ...) {
  qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
  H <- 1.5 * IQR(x, na.rm = na.rm)
  y <- x
  y[x < (qnt[1] - H)] <- NA
  y[x > (qnt[2] + H)] <- NA
  y
}

trimDateRange <- function(start_date, end_date) {
  my_days <- seq(start_date, end_date, by = "day")
  first_sunday <- which(weekdays(head(my_days, 7)) == "Sunday")
  last_sunday <- length(my_days) - 7 + which(weekdays(tail(my_days, 7)) == "Sunday")
  trimmed_date_range <- my_days[first_sunday:last_sunday]
  return(trimmed_date_range)
}

niceDateFormat <- function(date_string) {
  d <- as.Date(date_string, "%m/%d/%Y")
  pretty_date_string = strftime(d, format="%d%b%y")
  return(pretty_date_string)
}

setMargins <- function(title_string, y_axis_label, axis_color) {
  # http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/par.html
  bottom_margin = 5
  top_margin <- if (is.null(title_string)) 1 else 4
  left_margin <- if (is.null(y_axis_label)) 5 else 6
  right_margin = 2
  title_margin_line = 3
  axis_label_margin_line = 1
  axis_line_margin_line = 0
  par(mar = c(bottom_margin, left_margin, top_margin, right_margin), mgp = c(title_margin_line, axis_label_margin_line, axis_line_margin_line), col.axis = axis_color)

}

drawSpecialPoints <- function(special_points, special_points_color) {
  if(!is.null(special_points)) {
    spx <- as.Date(special_points$date, opt$input_date_format)
    spy <- special_points$value
    spl <- special_points$label

    points(spx, spy, cex=2.0, pch=19, col=special_points_color)
    # http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/text.html
    text(spx, spy, labels=spl, cex=1.0, pos=2, offset=1, col=special_points_color)
  }
}

drawAxesAndGridlines <- function(date_sequence, y_sequence, y_axis_unit, show_gridlines) {
  axis.Date(1, at=date_sequence, format="%d%b%y", las=2)
  axis(2, las=2, at=y_sequence, labels=paste(y_sequence, y_axis_unit, sep=""))
  if(show_gridlines) {
    abline(v=date_sequence, col="gray87")
    abline(h=y_sequence, col="gray87")
  }
}

plotGraph <- function(x, y, width, height, x_spacing, smoothness, x_range, y_range, filename, title, y_axis_label, y_axis_unit, point_color, sunday_point_color, show_gridlines, remove_outliers, axis_color, trim_to_week, input_date_format, special_points, special_points_color) { 
  title_string <- if (!is.null(title)) sprintf(title, niceDateFormat(x[1]), niceDateFormat(x[length(x)])) else NULL
  
  d <- as.Date(x, input_date_format)

  if(remove_outliers) { y <- removeOutliers(y) }

  png(filename=filename, height=height, width=width, bg="white")

  setMargins(title_string, y_axis_label, axis_color)

  scatter.smooth(d, y, family="gaussian", col=ifelse((format(d, format="%A")=="Sunday"), sunday_point_color, point_color), xlab="", ylab="", ylim=y_range, xlim=x_range, span=smoothness, xaxt='n', yaxt='n')
  drawSpecialPoints(special_points, special_points_color)

  if(!is.null(title_string)) { mtext(side=3, line=1.2, cex=1.6, text=title_string, col="darkorange4") }
  if(!is.null(y_axis_label)) { mtext(side=2, line=3.4, cex=1.3, text=y_axis_label, col="darkorange4") }
  
  if(trim_to_week) { d=trimDateRange(d[1],d[length(d)]) }
  date_sequence=seq(d[1], d[length(d)], x_spacing)
  y_sequence=pretty(y, n=6)
  drawAxesAndGridlines(date_sequence, y_sequence, y_axis_unit, show_gridlines)

  # send output from dev.off to garbage since it's annoying
  garbage <- dev.off()
}

dumpOpt <- function(opt) {
  cat("generating graph to file:      ", opt$output_filename, "\n")
  cat("using data file:               ", opt$csv_filename, "\n")
  cat("using special points file:     ", opt$special_points_filename, "\n")
  cat("special points color:          ", opt$special_points_color, "\n")
  cat("graph title:                   ", opt$title, "\n")
  cat("y axis title:                  ", opt$y_title, "\n")
  cat("y axis unit:                   ", opt$y_unit, "\n")
  cat("smoothness:                    ", opt$smoothness, "\n")
  cat("width:                         ", opt$width, "\n")
  cat("height:                        ", opt$height, "\n")
  cat("x_spacing:                     ", opt$x_spacing, "\n")
  cat("point_color:                   ", opt$point_color, "\n")
  cat("sunday_point_color:            ", opt$sunday_point_color, "\n")
  cat("axis_color:                    ", opt$axis_color, "\n")
  cat("show_gridlines:                ", opt$show_gridlines, "\n")
  cat("remove_outliers:               ", opt$remove_outliers, "\n")
  cat("trim_to_week:                  ", opt$trim_to_week, "\n")
  cat("input_date_format:             ", opt$input_date_format, "\n")
  cat("y_range:                       ", opt$y_range, "\n")
  cat("x_range:                       ", opt$x_range, "\n")
}

usage <- function(spec) {
  cat("NAME\n")
  cat("      plot_time_series\n")
  cat("\nSYNOPSIS\n")
  cat("      ",getopt(spec, usage=TRUE));
  cat("\nDESCRIPTION\n")
  cat("      The plot_time_series is a simple utility for plotting a time series graph using R.\n")
  cat("      This is useful for e.g. plotting KPI values over time.\n")
  cat("      The graph is drawn as a scatterplot with a LOESS fit line of variable smoothness.\n")
  cat("\nOPTIONS\n")
  cat("      The options are as follows:\n\n")
  cat("      --verbose                    Get a little chatty?\n")
  cat("      --width                      The width of the graph in pixels\n")
  cat("      --height                     The height of the graph in pixels\n")
  cat("      --csv_filename               A CSV containing input data with columns date,value (example below)\n")
  cat("      --output_filename            The file that the graph is written to\n")
  cat("      --special_points_filename    A file containing special points e.g. milestones or targets\n")
  cat("      --special_points_color       The color of the special points\n")
  cat("      --title                      The title shown above the graph\n")
  cat("      --y_title                    The title shown on the y axis of the graph\n")
  cat("      --y_unit                     A string appended to the y axis values e.g. MM\n")
  cat("      --y_range                    Manually set Y axis limits e.g. 10:1000\n")
  cat("      --x_range                    Manually set X axis limits e.g. 04/27/2012:05/20/2013\n")
  cat("      --x_spacing                  How the x-axis is spaced e.g. day, 3 days, week, month, 2 weeks, 2 months\n")
  cat("      --point_color                The color to draw points in\n")
  cat("      --sunday_point_color         The color to draw sunday points in\n")
  cat("      --input_date_format          The format of the date in the datafile, default is \"%m/%d/%Y\"\n")
  cat("      --axis_color                 The color to use for the axis\n")
  cat("      --smoothness                 How much to smooth the LOESS fit line. Float between 0 and 1\n")
  cat("      --remove_outliers            Automagically remove outlying points?\n")
  cat("      --trim_to_week               Trim the X axis to whole weeks? (x grid goes Sunday to Sunday)\n")
  cat("      --show_gridlines             Show gridlines?\n")
  cat("\nEXAMPLES\n")
  cat("      $ plot_time_series --width=800 --height=400 --x_spacing=month --csv_filename=test_data/unbranded_organic_registrations.csv --output_filename=output/unbranded_organic_registrations.png --title=\"Unbranded Organic Registrations: %s to %s\" --y_title=\"Number Registrations\"\n\n")
  cat("\nEXAMPLE INPUT FILE\n")
  cat("      date,value\n")
  cat("      03/06/2012,6347.04\n")
  cat("      03/07/2012,9990.23\n")
  cat("      03/08/2012,6773.41\n")
  cat("\nCOLOR\n")
  cat("      Available colors documented at: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n\n")
  q(status=1);
}

# define the command line option structure
spec = matrix(c(
  'verbose', 'v', 0, "logical",
  'help', 'h', 0, "logical",
  'show_gridlines', 'g', 0, "logical",
  'remove_outliers', 'o', 0, "logical",
  'trim_to_week', 'T', 0, "logical",
  'csv_filename', 'c', 1, "character",
  'special_points_filename', 'S', 2, "character",
  'special_points_color', 'C', 2, "character",
  'output_filename', 'f', 1, "character",
  'input_date_format', 'd', 1, "character",
  'title', 't', 1, "character",
  'y_title', 'y', 1, "character",
  'y_unit', 's', 1, "character",
  'y_range', 'Y', 2, "character",
  'x_range', 'X', 2, "character",
  'x_spacing', 'x', 2, "character",
  'smoothness', 'm', 2, "double",
  'width', 'w', 2, "integer",
  'height', 'u', 2, "integer",
  'point_color', 'p', 2, "character",
  'sunday_point_color', 'z', 2, "character",
  'axis_color', 'a', 2, "character"
), byrow=TRUE, ncol=4)

# http://cran.r-project.org/web/packages/getopt/getopt.pdf
opt = getopt(spec)

# set some reasonable defaults for the options that are needed,
if ( !is.null(opt$help) ) { usage(spec) }
if ( is.null(opt$smoothness ) ) { opt$smoothness = 0.3 }
if ( is.null(opt$width ) ) { opt$width = 1150 }
if ( is.null(opt$height ) ) { opt$height = 640 }
if ( is.null(opt$x_spacing ) ) { opt$x_spacing = "week" }
if ( is.null(opt$point_color ) ) { opt$point_color = "black" }
if ( is.null(opt$input_date_format ) ) { opt$input_date_format = "%m/%d/%Y" }
if ( is.null(opt$sunday_point_color ) ) { opt$sunday_point_color = "red" }
if ( is.null(opt$axis_color ) ) { opt$axis_color = "gray30" }
if ( is.null(opt$show_gridlines ) ) { opt$show_gridlines = FALSE }
if ( is.null(opt$remove_outliers ) ) { opt$remove_outliers = FALSE }
if ( is.null(opt$trim_to_week ) ) { opt$trim_to_week = FALSE }
if ( is.null(opt$verbose ) ) { opt$verbose = FALSE }
if ( is.null(opt$csv_filename) ) { usage(spec) }
if ( is.null(opt$output_filename) ) { usage(spec) }
if ( is.null(opt$special_points_color) ) { opt$special_points_color = "brown2" }

if (opt$verbose) { dumpOpt(opt) }

kpi_data=read.table(opt$csv_filename, sep=",", head=TRUE)

x <- kpi_data$date
y <- kpi_data$value

special_points <- if (!is.null(opt$special_points_filename)) read.table(opt$special_points_filename, sep=",", head=TRUE) else NULL
y_range <- if (!is.null(opt$y_range)) as.integer(unlist(strsplit(opt$y_range,':'))) else NULL
x_range <- if (!is.null(opt$x_range)) as.Date(unlist(strsplit(opt$x_range,':')), opt$input_date_format) else NULL

plotGraph(x, y, opt$width, opt$height, opt$x_spacing, opt$smoothness, x_range, y_range, opt$output_filename, opt$title, opt$y_title, opt$y_unit, opt$point_color, opt$sunday_point_color, opt$show_gridlines, opt$remove_outliers, opt$axis_color, opt$trim_to_week, opt$input_date_format, special_points, opt$special_points_color)
