#!/usr/bin/Rscript
require('getopt');

remove_outliers <- function(x, na.rm = TRUE, ...) {
  qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
  H <- 1.5 * IQR(x, na.rm = na.rm)
  y <- x
  y[x < (qnt[1] - H)] <- NA
  y[x > (qnt[2] + H)] <- NA
  y
}

trimDateRange <- function(startDate, endDate)
{
  myDays <- seq(startDate , endDate, by = "day")
  firstSunday <- which(weekdays(head(myDays, 7)) == "Sunday")
  lastSunday <- length(myDays) - 7 + which(weekdays(tail(myDays, 7)) == "Sunday")
  trimmedDateRange <- myDays[firstSunday:lastSunday]
  return(trimmedDateRange)
}

niceDateFormat <- function(dateString)
{
  d <- as.Date(dateString, "%m/%d/%Y")
  pretty_date_string = strftime(d, format="%d%b%y")
  return(pretty_date_string)
}

setMargins <- function(title_string, y_axis_label, axis_color)
{
  # http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/par.html
  bottom_margin = 5
  top_margin <- if (is.null(title_string)) 1 else 4
  left_margin <- if (is.null(y_axis_label)) 5 else 6
  right_margin = 2
  title_margin_line = 3
  axis_label_margin_line = 1
  axis_line_margin_line = 0
  par(mar = c(bottom_margin, left_margin, top_margin, right_margin), mgp = c(title_margin_line, axis_label_margin_line, axis_line_margin_line), col.axis = axis_color)

}

plotGraph <- function(x, y, width, height, x_spacing, smoothness, y_range, filename, title, y_axis_label, y_axis_unit, point_color, sunday_point_color, show_gridlines, remove_outliers, axis_color)
{
  date_format = "%d%b%y"
  first_date_string=x[1]
  last_date_string=x[length(x)]
  if(!is.null(title)) { title_string = sprintf(title, niceDateFormat(first_date_string), niceDateFormat(last_date_string)) } else { title_string = NULL }
  d <- as.Date(x, "%m/%d/%Y")

  if(remove_outliers) { y <- remove_outliers(y) }

  # start the png device driver
  png(filename=filename, height=height, width=width, bg="white")

  setMargins(title_string, y_axis_label, axis_color)

  scatter.smooth(d, y, col=ifelse((format(d, format="%A")=="Sunday"), sunday_point_color, point_color), xlab="", ylab="", ylim=y_range, span=smoothness, xaxt='n', yaxt='n')
  if(!is.null(title_string)) { mtext(side=3, line=1.2, cex=1.6, text=title_string, col="darkorange4") }
  if(!is.null(y_axis_label)) { mtext(side=2, line=3.4, cex=1.3, text=y_axis_label, col="darkorange4") }
  c=trimDateRange(d[1],d[length(d)])
  date_sequence=seq(c[1], c[length(c)], x_spacing)
  axis.Date(1, at=date_sequence, format=date_format, las=2)
  y_sequence=pretty(y, n=6)
  axis(2, las=2, at=y_sequence, labels=paste(y_sequence, y_axis_unit, sep=""))
  if(show_gridlines)
  {
    abline(v=date_sequence, col="gray87")
    abline(h=y_sequence, col="gray87")
  }

  # send output from dev.off to garbage since it's annoying
  garbage <- dev.off()
}

dump_opt <- function(opt)
{
  cat("generating graph to file:      ", opt$output_filename, "\n")
  cat("using data file:               ", opt$csv_filename, "\n")
  cat("graph title:                   ", opt$title, "\n")
  cat("y axis title:                  ", opt$y_title, "\n")
  cat("y axis unit:                   ", opt$y_unit, "\n")
  cat("smoothness:                    ", opt$smoothness, "\n")
  cat("width:                         ", opt$width, "\n")
  cat("height:                        ", opt$height, "\n")
  cat("x_spacing:                     ", opt$x_spacing, "\n")
  cat("point_color:                   ", opt$point_color, "\n")
  cat("sunday_point_color:            ", opt$sunday_point_color, "\n")
  cat("axis_color:                    ", opt$axis_color, "\n")
  cat("show_gridlines:                ", opt$show_gridlines, "\n")
  cat("remove_outliers:               ", opt$remove_outliers, "\n")
}

usage <- function(spec)
{
  cat("NAME\n")
  cat("      plot_timeseries\n")
  cat("\nSYNOPSIS\n")
  cat("      ",getopt(spec, usage=TRUE));
  cat("\nDESCRIPTION\n")
  cat("      The plot_timeseries is a simple utility for plotting a timeseries graph using R\n")
  cat("      with some flexibility. This is handy for e.g. plotting KPI values over time.\n")
  cat("      The graph is drawn as a scatterplot with a LOESS fit line of controllable smoothness\n")
  cat("\nOPTIONS\n")
  cat("      The options are as follows:\n\n")
  cat("      --verbose            Get a little chatty\n")
  cat("      --width              The width of the graph in pixels\n")
  cat("      --height             The height of the graph in pixels\n")
  cat("      --csv_filename       A CSV containing input data with columns date,value (example below)\n")
  cat("      --output_filename    The file that the graph is written to\n")
  cat("      --title              The title shown above the graph\n")
  cat("      --y_title            The title shown on the y axis of the graph\n")
  cat("      --y_unit             A string appended to the y axis values e.g. MM\n")
  cat("      --x_spacing          How the x-axis is spaced e.g. day, 3 days, week, month, 2 weeks, 2 months\n")
  cat("      --point_color        The color to draw points in\n")
  cat("      --sunday_point_color The color to draw sunday points in\n")
  cat("      --axis_color         The color to use for the axis\n")
  cat("      --remove_outliers    Automagically remove outlying points\n")
  cat("      --show_gridlines     Show gridlines?\n")
  cat("\nEXAMPLES\n")
  cat("      ./plot_timeseries --width=800 --height=400 --x_spacing=month --csv_filename=test_data/unbranded_organic_registrations.csv --output_filename=output/unbranded_organic_registrations.png --title=\"Unbranded Organic Registrations: %s to %s\" --y_title=\"Number Registrations\"\n\n")
  cat("\nEXAMPLE INPUT FILE\n")
  cat("      date,value\n")
  cat("      03/06/2012,6347.04\n")
  cat("      03/07/2012,9990.23\n")
  cat("      03/08/2012,6773.41\n")
  cat("\nCOLOR\n")
  cat("      Available colors documented at: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n\n")
  q(status=1);
}

# define the command line option structure
spec = matrix(c(
  'verbose', 'v', 0, "logical",
  'help', 'h', 0, "logical",
  'show_gridlines', 'g', 0, "logical",
  'remove_outliers', 'o', 0, "logical",
  'csv_filename', 'c', 1, "character",
  'output_filename', 'f', 1, "character",
  'title', 't', 1, "character",
  'y_title', 'y', 1, "character",
  'y_unit', 's', 1, "character",
  'x_spacing', 'x', 2, "character",
  'smoothness', 'm', 2, "double",
  'width', 'w', 2, "integer",
  'height', 'u', 2, "integer",
  'point_color', 'p', 2, "character",
  'sunday_point_color', 'z', 2, "character",
  'axis_color', 'a', 2, "character"
), byrow=TRUE, ncol=4)

# http://cran.r-project.org/web/packages/getopt/getopt.pdf
opt = getopt(spec)

#set some reasonable defaults for the options that are needed,
if ( !is.null(opt$help) ) { usage(spec) }
if ( is.null(opt$smoothness ) ) { opt$smoothness = 0.3 }
if ( is.null(opt$width ) ) { opt$width = 1150 }
if ( is.null(opt$height ) ) { opt$height = 640 }
if ( is.null(opt$x_spacing ) ) { opt$x_spacing = "week" }
if ( is.null(opt$point_color ) ) { opt$point_color = "black" }
if ( is.null(opt$sunday_point_color ) ) { opt$sunday_point_color = "red" }
if ( is.null(opt$axis_color ) ) { opt$axis_color = "gray30" }
if ( is.null(opt$show_gridlines ) ) { opt$show_gridlines = FALSE }
if ( is.null(opt$remove_outliers ) ) { opt$remove_outliers = FALSE }
if ( is.null(opt$verbose ) ) { opt$verbose = FALSE }
if ( is.null(opt$csv_filename) ) { usage(spec) }
if ( is.null(opt$output_filename) ) { usage(spec) }

if (opt$verbose) { dump_opt(opt) }

kpi_data=read.table(opt$csv_filename, sep=",", head=TRUE)

x <- kpi_data$date
y <- kpi_data$value

plotGraph(x, y, opt$width, opt$height, opt$x_spacing, opt$smoothness, NULL, opt$output_filename, opt$title, opt$y_title, opt$y_unit, opt$point_color, opt$sunday_point_color, opt$show_gridlines, opt$remove_outliers, opt$axis_color)
